version: '3.7'
x-airflow-common:
    &airflow-common
    image: ${SEURON_TAG}
    restart: always
    environment:
        &airflow-common-env
        VENDOR:
        AIRFLOW__CORE__FERNET_KEY:
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN:
        AIRFLOW__CELERY__BROKER_URL:
        AIRFLOW__CELERY__CELERY_RESULT_BACKEND:
        AIRFLOW__WEBSERVER__SECRET_KEY:
        AIRFLOW__LOGGING__BASE_LOG_FOLDER:
        AIRFLOW__LOGGING__REMOTE_LOGGING:
        AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER:
        AIRFLOW__METRICS__STATSD_ON:
        AIRFLOW__METRICS__STATSD_HOST:
        AIRFLOW__METRICS__STATSD_PORT:
        REDIS_SERVER:
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /tmp:/tmp
    deploy:
        restart_policy:
            condition: any

volumes:
    rabbitmq-storage:
    postgres-storage:
    prometheus-storage:
    grafana-storage:
    redis-storage:
    jupyterlab-storage:

services:
    rabbitmq:
        image: rabbitmq:3.10-management
        restart: always
        environment:
            - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit heartbeat 600 consumer_timeout 2592000000
        volumes:
            - rabbitmq-storage:/var/lib/rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
            interval: 60s
            retries: 5

    postgres:
        image: postgres:13-alpine
        restart: always
        environment:
            - POSTGRES_USER
            - POSTGRES_PASSWORD
            - POSTGRES_DB
        volumes:
            - postgres-storage:/var/lib/postgresql/data
        command: -c max_connections=${POSTGRES_MAX_CONN} -c shared_buffers=${POSTGRES_MEM_MB}MB -c idle_in_transaction_session_timeout=300000
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 60s
            retries: 5

    pgbouncer:
        image: ranlu/pgbouncer:1.17.0
        restart: always
        environment:
            - DB_USER=${POSTGRES_USER}
            - DB_PASSWORD=${POSTGRES_PASSWORD}
            - DB_NAME=${POSTGRES_DB}
            - DB_HOST=postgres
            - MAX_CLIENT_CONN=10000
            - DEFAULT_POOL_SIZE=${POSTGRES_MAX_CONN}
            - POOL_MODE=transaction
        ports:
            - "5432:5432"

    postgres-exporter:
        image: quay.io/prometheuscommunity/postgres-exporter
        restart: always
        environment:
            DATA_SOURCE_URI: postgres?sslmode=disable
            DATA_SOURCE_USER: ${POSTGRES_USER}
            DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}

    statsd-exporter:
        image: ranlu/statsd-exporter
        restart: always
        command: "--statsd.listen-udp=:9125 --web.listen-address=:9102 --statsd.mapping-config=/statsd.conf"
        ports:
            - "9125:9125/udp"

    prometheus:
        image: ranlu/prometheus
        restart: always
        volumes:
            - prometheus-storage:/prometheus

    grafana:
        image: ranlu/grafana
        restart: always
        environment:
            GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
            GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
            GF_SERVER_ROOT_URL: https://localhost/grafana
            GF_USERS_DEFAULT_THEME: light
            GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/dashboards/SeuronDashboard.json
            POSTGRES_USER:
            POSTGRES_PASSWORD:
            POSTGRES_DB:
        volumes:
            - grafana-storage:/var/lib/grafana

    redis:
        image: redis:7-alpine
        restart: always
        command: redis-server --save 60 1
        ports:
            - "6379:6379"
        volumes:
            - redis-storage:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 30s
            retries: 50

    # single shot initialize the database
    init-seuronbot:
        <<: *airflow-common
        restart: on-failure
        environment:
            <<: *airflow-common-env
            SLACK_NOTIFICATION_CHANNEL:
            DEPLOYMENT:
            ZONE:
            _AIRFLOW_DB_UPGRADE: 'true'
            _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
            _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        command: bash pipeline/init_pipeline.sh
        deploy:
            restart_policy:
                condition: on-failure

    webserver:
        <<: *airflow-common
        command: airflow webserver
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8080/airflow/health"]
            interval: 60s
            timeout: 10s
            retries: 5

    scheduler:
        <<: *airflow-common
        command: airflow scheduler
        healthcheck:
            test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
            interval: 60s
            timeout: 10s
            retries: 5

    worker-cluster:
        <<: *airflow-common
        environment:
            <<: *airflow-common-env
            AIRFLOW__CELERY__WORKER_CONCURRENCY: 1
        command: airflow celery worker --without-gossip --without-mingle -q cluster

    worker-manager:
        <<: *airflow-common
        environment:
            <<: *airflow-common-env
            AIRFLOW__CELERY__WORKER_CONCURRENCY: 3
        command: airflow celery worker --without-gossip --without-mingle -q manager

    slackbot:
        <<: *airflow-common
        container_name: slackbot
        environment:
            <<: *airflow-common-env
            ENABLE_JUPYTER_INTERFACE:
            SLACK_TOKEN:
            SLACK_NOTIFICATION_CHANNEL:
            DEPLOYMENT:
        command: python slackbot/slack_bot.py
        volumes:
            - jupyterlab-storage:/usr/local/airflow/jupyterlab

    oom-detector:
        <<: *airflow-common
        environment:
            <<: *airflow-common-env
        command: python utils/memory_monitor.py amqp://rabbitmq worker-client-queue

    proxy:
        image: nginx:1.23.0-alpine
        environment:
            BASIC_AUTH_USERNAME:
            BASIC_AUTH_PASSWORD:
        restart: always
        ports:
            - target: 443
              published: 443
              protocol: tcp
              mode: host
        deploy:
            restart_policy:
                condition: any
        #volumes:
            #- ../secrets:/run/secrets/
        command:
            sh -c "apk update && apk add apache2-utils openssl &&
            [ -n \"$$BASIC_AUTH_PASSWORD\" ] &&
                   AUTH_BASIC_STRING=\\\"AirflowAuthorization\\\" &&
                   htpasswd -b -c /etc/nginx/.htpasswd $${BASIC_AUTH_USERNAME} $${BASIC_AUTH_PASSWORD} ||
            AUTH_BASIC_STRING=off &&
            mkdir -p /run/secrets/ &&
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /run/secrets/ssl_certificate_key -subj "/C=US/ST=NJ/L=P/O=P/OU=SL/CN=SEURON" -out /run/secrets/ssl_certificate &&
            SSL_CERTIFICATE=$$(cat /run/secrets/ssl_certificate) &&
            SSL_BLOCK=\"ssl_certificate \\/run\\/secrets\\/ssl_certificate;\\n
             ssl_certificate_key \\/run\\/secrets\\/ssl_certificate_key;\\n
             ssl_session_cache  builtin:1000  shared:SSL:10m;\\n
             ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;\" &&
            echo $$SSL_BLOCK && 
            if ! grep airflow /etc/nginx/nginx.conf; then
                sed -i -e \"s/include \\/etc\\/nginx\\/conf\\.d\\/\\*\.conf;//\" 
                -e \"\\$$s/}/
                    error_log \\/var\\/log\\/error.log;\\n
                    gzip  on;\\n
                    gzip_vary on;\\n
                    gzip_min_length 10240;\\n
                    gzip_proxied expired no-cache no-store private auth;\\n
                    gzip_types text\\/plain text\\/css text\\/xml text\\/javascript application\\/x-javascript application\\/xml;\\n
                    gzip_disable \\\"MSIE [1-6]\.\\\";\\n
                    map \\$$http_upgrade \\$$connection_upgrade {\\n
                        default upgrade;\\n
                        \\'\\'      close;\\n
                    }\\n
                    server {\\n
                        listen 443 ssl;\\n
                        auth_basic $${AUTH_BASIC_STRING};\\n
                        auth_basic_user_file \\/etc\\/nginx\\/\.htpasswd;\\n
                        $${SSL_BLOCK}\\n
                        proxy_set_header X-Real-IP \\$$remote_addr;\\n
                        proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;\\n
                        location \\/airflow\\/ {\\n
                            proxy_pass http:\\/\\/webserver:8080;\\n
                            proxy_set_header Host \\$$http_host;\\n
                            proxy_redirect off;\\n
                            proxy_http_version 1.1; \\n
                            proxy_set_header Upgrade \\$$http_upgrade; \\n
                            proxy_set_header Connection \\\"upgrade\\\"; \\n
                            proxy_set_header X-Forwarded-Proto \\$$scheme; \\n
                        }\\n
                        location \\/jupyter\\/ {\\n
                            proxy_pass http:\\/\\/slackbot:8888;\\n
                            proxy_set_header X-Real-IP \\$$remote_addr;\\n
                            proxy_set_header Host \\$$http_host;\\n
                            proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;\\n
                            proxy_redirect off;\\n
                            proxy_http_version 1.1; \\n
                            proxy_set_header Upgrade \\$$http_upgrade; \\n
                            proxy_set_header Connection \\$$connection_upgrade; \\n
                            proxy_set_header X-Scheme \\$$scheme;
                            proxy_set_header X-Forwarded-Proto \\$$scheme;\\n
                            proxy_buffering off;\\n
                        }\\n
                        location ^~ \\/grafana\\/ {\\n
                            proxy_pass http:\\/\\/grafana:3000\\/;\\n
                            proxy_set_header Host \\$$http_host;\\n
                            proxy_redirect off;\\n
                            proxy_set_header Authorization \\\"\\\";\\n
                        }\\n
                    }\\n
                }/\" /etc/nginx/nginx.conf;
            fi &&
            unset SSL_CERTIFICATE &&
            nginx-debug -g \"daemon off;\" 2>&1"

networks:
    default:
        attachable: true
        ipam:
            driver: default
            config:
                - subnet: 10.253.0.0/16
